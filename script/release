#!/bin/bash

# About:
#
# This is a helper script to tag and push a new release. GitHub Actions use
# release tags to allow users to select a specific version of the action to use.
#
# See: https://github.com/actions/typescript-action#publishing-a-new-release
#
# This script will do the following:
#
# 1. Get the latest release tag
# 2. Prompt the user for a new release tag if not provided as an argument
# 3. Tag the new release
# 4. Push the new tag to the remote
#
# Usage:
#
# script/release [new_tag]

# Terminal colors
OFF='\033[0m'
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'

# Package/build the dist/index.js file.
bun run package

# Check if there are any uncommitted changes.
if [[ -n $(git status -s) ]]; then
    # Echo that the packaged script has changes that haven't been comitted and then commit them.
    echo -e "${RED}Uncommitted changes found${OFF}"

    # Prompt the user to commit the changes
    read -r -p 'Do you want to commit the changes? [Y/n] ' response

    # Set default value to 'Y' if no response is provided
    response=${response:-Y}

    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
        # Commit the changes
        git add dist/
        git commit -m "chore: added latest packaged script"
        echo -e "${GREEN}Changes committed${OFF}"
    else
        # User chose not to commit the changes
        echo -e "${RED}Changes not committed${OFF}"
        exit 1
    fi
fi

# Get the latest release tag
latest_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)")

if [[ -z "$latest_tag" ]]; then
    # There are no existing release tags
    echo -e "No tags found (yet) - Continue to create and push your first tag"
    latest_tag="[unknown]"
fi

# Display the latest release tag
echo -e "The latest release tag is: ${BLUE}${latest_tag}${OFF}"

# Check if new_tag is provided as an argument
if [[ -n "$1" ]]; then
    new_tag="$1"
else
    # Prompt the user for the new release tag
    read -r -p 'Enter a new release tag (vX.X.X format): ' new_tag
fi

# Validate the new release tag
tag_regex='v[0-9]+\.[0-9]+\.[0-9]+$'
if echo "$new_tag" | grep -q -E "$tag_regex"; then
    echo -e "Tag: ${BLUE}$new_tag${OFF} is valid"
else
    # Release tag is not `vX.X.X` format
    echo -e "Tag: ${BLUE}$new_tag${OFF} is ${RED}not valid${OFF} (must be in vX.X.X format)"
    exit 1
fi

# Tag the new release
git tag -s "$new_tag" -m "$new_tag Release"
echo -e "${GREEN}Tagged: $new_tag${OFF}"

# Push the new tag to the remote
git push --follow-tags
echo -e "${GREEN}Release tag pushed to remote${OFF}"
echo -e "${GREEN}Done!${OFF}"
